{
    "extractionPatternID": "COVID19BI_03",
    "extractionPatternName": "COVID19BI_03",
    "description": "COVID 19 BI Data Call Extraction Pattern",
    "jurisdication": "AL",
    "insurance": "Multiple Lines",
    "viewDefinition": {
        "map": "function map() {\n    const RECORD_TYPE_PREMIUM = 'Premium'\n    const RECORD_TYPE_LOSS = 'Loss'\n    const LOB_IM = '31'\n    const LOB_CP = '47'\n    const LOB_BP = '49'\n    const PREMIUM_LEVEL_POLICY = 'Policy'\n    const PREMIUM_LEVEL_COVERAGE = 'Coverage'\n\n    let filters = {\n        \"lineOfInsurance\" : ['31','47','49'],\n        \"annualStatementLineofBusiness\": ['010','21','51'],\n        \"lossAccountingStartDate\": new Date('01/01/2020'), // 2010 to be changed to 2020 \n        \"lossAccountingEndDate\": '', //current date\n        \"premiumAccountingStartDate\": new Date('01/01/2020'), //2010 to be changed to 2020 \n        \"premiumAccountingEndDate\": new Date('12/31/2020'), //2010 to be changed to 2020 \n        \"lossAccidentDateStartDate\": new Date('01/01/2020'), \n        \"lossAccidentDateEndDate\": '', \n        \"transactionCodeFilter\": [\"1\",\"2\",\"3\",\"9\"] //Transaction code in (1|2|3|9)  \n    }\n     \n    let chunkId = this.chunkId\n    let recordType = (this.claim ? RECORD_TYPE_LOSS : RECORD_TYPE_PREMIUM)\n    let carrierId = this.carrierId;\n    //Variable Setting for Group Fields \n    let stateCode = this.policy.policyStructure[0].location[0].geographicLocation.stateLegacyCode;\n    let stateName = this.policy.policyStructure[0].location[0].geographicLocation.stateName;\n    let lineOfInsuranceCode = this.policy.lineOfInsurance.legacyCode; \n    let lineOfInsuranceName = this.policy.lineOfInsurance.name;\n    let annualStatementLineofBusinessCode = this.policy.annualStatementLineOfBusiness.code;  \n    let annualStatementLineofBusinessName = this.policy.annualStatementLineOfBusiness.description;  \n\n    let policyForm  = (recordType === RECORD_TYPE_PREMIUM ? this.policy.policyForm : this.policy.policyStructure[0].coverages[0].policyForm)\n    let policyFormName = policyForm.description\n    let physicalDamageRequirement = policyForm.physicalDamageRequirement ? 'Y' : 'N'\n    let businessInteruptionFlag = policyForm.businessInteruptionFlag ? 'Y' : 'N'\n    let viralExclusion = policyForm.viralExclusion ? 'Y' : 'N'\n\n    let majorPerilName = this.policy.perilCategory ? this.policy.perilCategory[0].majorPeril : ''\n\n    let numberOfEmployees = this.policy.numberOfEmployees ? parseInt(this.policy.numberOfEmployees) : null\n\n    let transactionCode = this.coverateLevel === PREMIUM_LEVEL_POLICY ? this.policy.currencyPayment[0].legacyCode : this.policy.policyStructure[0].coverages[0].currencyPayment[0].legacyCode\n    let transactionType = this.coverageLevel === PREMIUM_LEVEL_POLICY ? this.policy.currencyPayment[0].transactionType : this.policy.policyStructure[0].coverages[0].currencyPayment[0].transactionType\n\n    let premiumAccountingDate = null\n    \n    if (this.coverageLevel === PREMIUM_LEVEL_POLICY) {\n        if (this.policy.currencyPayment[0].accountStatement) {\n            premiumAccountingDate = this.policy.currencyPayment[0].accountStatement.periodStartDate\n        }\n    } else {\n        premiumAccountingDate = this.policy.policyStructure[0].coverages[0].currencyPayment[0].periodStartDate\n    }\n\n    let lossAccountingDate = null\n    let lossAccidentDate = null\n    let causeOfLossName = ''\n    let claimStatus = ''\n    let lossAmount = null\n    let premiumAmount = null\n    if (this.claim) {\n        lossAmount = this.claim.lossType === 'Paid Loss' ? this.claim.claimFolder.claimComponent[0].claimOffer[0].payment[0].amount : this.claim.claimFolder.claimComponent[0].currencyPayment[0].currencyPaymentAmount\n        if (this.claim.claimFolder) {\n            // TODO: KS Claim Status is meaningless\n            // let claimStatusCode = this.claim.claimFolder.claimStatus\n            // if (claimStatusCode) {\n            //     claimStatus = 'closed'\n            // } else {\n            //     claimStatus = ''\n            // }\n            if (this.claim.claimFolder.claimComponent) {\n                if (this.claim.claimFolder.claimComponent[0].causeOfLoss) {\n                    causeOfLossName = this.claim.claimFolder.claimComponent[0].causeOfLoss.name\n                }\n                if (this.claim.claimFolder.claimComponent[0].currencyPayment[0].accountStatement) {\n                    lossAccountingDate = this.claim.claimFolder.claimComponent[0].currencyPayment[0].accountStatement.periodStartDate \n                }\n            }\n            lossAccidentDate = this.claim.claimFolder.eventStartDate\n        }\n    } else {\n        premiumAmount = this.policy.currencyPayment[0].currencyPaymentAmount\n    }\n    let sicCode = ''\n    if (this.policy.businessClassification) {\n        sicCode = this.policy.businessClassification.description\n    }\n\n    let policyNumber = this.policyNo\n\n    // TODO: KS only emit if it's a loss record?\n    // TODO: KS only emit if inside the dates\n    //  if (lineofInsuranceFilter.includes(lineofInsurance) && (transactionCodeFilter.includes(transactionCode)) \n    //      && ((premiumAccountingDateModified >= premiumAccountingStartDate && premiumAccountingDateModified <= premiumAccountingEndDate) \n    //      || (lossAccountingDateModified >= lossAccountingStartDate && lossAccountingDateModified <= currentDate)) \n    //      //&& (lossAccidentDateModified >= lossAccidentDateStartDate && lossAccidentDateModified <= currentDate) \n    //      //&& (annualStatementLineofBusinessFilter.includes(annualStatementLineofBusiness)) \n    //      //&& •  Cause of loss in (‘All other physical damage’)  \n    //  )\n    if (filters.lineOfInsurance.includes(lineOfInsuranceCode)) {\n        emit(\n            {\n                \"stateName\":stateName,\n                \"lineofInsurance\":lineOfInsuranceName,\n                \"annualStatementLineofBusiness\":annualStatementLineofBusinessName,\n                \"policyForm\":policyFormName,\n                \"majorPeril\":majorPerilName,\n                \"numberOfEmployees\":numberOfEmployees,\n                \"physicalDamageRequirement\":physicalDamageRequirement,\n                \"transactionCode\":transactionCode,\n                \"transactionName\":transactionType,\n                \"causeOfLoss\":causeOfLossName,\n                \"claimStatus\":claimStatus,\n                \"accountingDate\": this.claim ? lossAccountingDate : premiumAccountingDate,\n                \"lossAccidentDate\":lossAccidentDate,\n                \"businessInteruptionFlag\":businessInteruptionFlag,\n                \"physicalDamageRequirementFlag\":physicalDamageRequirement,\n                \"viralExclusion\":viralExclusion,\n                \"sicCode\":sicCode\n            }, \n            {\n                \"writtenPremiumAmount\":premiumAmount,\n                \"lossAmount\":lossAmount,\n                \"policyNumber\":policyNumber,\n                \"lossAmount\":lossAmount,\n                \"chunkId\":chunkId\n            }\n        ); \n    }\n}",
        "reduce": "function reduce (key,values) {\n    let result = {}\n    let totalLossAmount = 0\n    let totalWrittenPremiumAmount = 0\n    let policyNumbers = []\n    let claimCount = 0\n    for (value of values) {\n        totalLossAmount += value.lossAmount\n        totalWrittenPremiumAmount += value.writtenPremiumAmount\n        if (value.policyNumber) {\n            policyNumbers.push(value.policyNumber)\n        }\n        claimCount++\n    }\n    result.lossAmount = totalLossAmount\n    result.writtenPremiumAmount = totalWrittenPremiumAmount\n    result.numberOfPolicies = new Set(policyNumbers).size\n    result.numberOfClaims = claimCount\n    result.chunkId = values[0].chunkId\n    result.value = {\"chunkId\":values[0].chunkId}\n    return result;\n}"
    },
    "dbType": "mongo",
    "version": "0.1",
    "isActive": true,
    "effectiveStartTs": "2022-01-30T18:30:00Z",
    "effectiveEndTs": "2023-01-30T18:30:00Z",
    "premiumFromDate": "2022-01-30T18:30:00Z",
    "premiumToDate": "2023-01-30T18:30:00Z",
    "lossFromDate": "2022-01-30T18:30:00Z",
    "lossToDate": "2023-01-30T18:30:00Z",
    "updatedTs": "2021-04-28T04:48:00Z",
    "updatedBy": "kens@aaisonline.com"
}